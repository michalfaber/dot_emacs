#+TITLE: Coding
#+OPTIONS: toc:2 num:nil

** Interactive change all occurences of a string.

   #+BEGIN_SRC emacs-lisp

(install-if-needed 'iedit)

(defun iedit-dwim (arg)
  "Starts iedit but uses \\[narrow-to-defun] to limit its scope."
  (interactive "P")
  (if arg
      (iedit-mode)
    (save-excursion
      (save-restriction
        (widen)
        ;; this function determines the scope of `iedit-start'.
        (if iedit-mode
            (iedit-done)
          ;; `current-word' can of course be replaced by other
          ;; functions.
          (narrow-to-defun)
          (iedit-start (current-word) (point-min) (point-max)))))))

(global-set-key (kbd "C-;") 'iedit-dwim)

   #+END_SRC
** Highlight matching parentheses when the point is on them.

May slow things down a little

   #+BEGIN_SRC emacs-lisp

(require 'rainbow-delimiters)

(show-paren-mode 1)

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

   #+END_SRC
** Ido mode

   #+BEGIN_SRC emacs-lisp

(ido-mode t)
  (setq ido-enable-prefix nil
        ido-enable-flex-matching t
        ido-create-new-buffer 'always
        ido-use-filename-at-point t
        ido-file-extensions-order '(".scala" ".org" ".txt" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf")
        ido-max-prospects 10)

   #+END_SRC
   
** Autocompletion

  #+begin_src emacs-lisp

  (install-if-needed 'company)

  (add-hook 'prog-mode-hook 'company-mode)

;;  (global-set-key (kbd "<tab>") 'company-complete)

  #+end_src

** Git

  #+begin_src emacs-lisp


  (install-if-needed 'magit)

  (setq magit-last-seen-setup-instructions "1.4.0")

  #+end_src

** Lisp / Clojure

Packages that help development in Lisp and Clojure 

  #+begin_src emacs-lisp

  (install-if-needed 'paredit)

  (install-if-needed 'clojure-mode)

  (install-if-needed 'clojure-mode-extra-font-locking)

  (install-if-needed 'cider)

  (add-hook 'cider-repl-mode-hook #'paredit-mode)

  (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode)

  (setq cider-repl-pop-to-buffer-on-connect nil)

  (setq nrepl-log-messages t)

  (setq cider-interactive-eval-result-prefix "")

  (add-hook 'cider-repl-mode-hook #'company-mode)

  (add-hook 'cider-mode-hook #'company-mode)

  #+end_src

** Scala

   #+begin_src emacs-lisp

  (install-if-needed 'ensime)

  (add-hook 'scala-mode-hook 'ensime-scala-mode-hook)
  
   #+end_src
   
** Python

   #+begin_src emacs-lisp

  (install-if-needed 'elpy)

  (elpy-enable)

  (exec-path-from-shell-copy-env "WORKON_HOME")
  
  ;; Fixing a key binding bug in elpy
  (define-key yas-minor-mode-map (kbd "C-c k") 'yas-expand)

  (setq elpy-rpc-backend "rope")

   #+end_src

   
