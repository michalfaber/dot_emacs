#+TITLE: Michal Faber Emacs configuration
#+OPTIONS: toc:2 num:nil

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: intro
  :END:

This is my emacs configuration as a [[http://en.wikipedia.org/wiki/Literate_programming][literate program]] using babel org-mode - it's an awesome tool to document/execute scripts in a sane way. Besides, the configuration works on Windows/Linux/Mac.
I was inspired mainly by the following sources:

  * https://github.com/eschulte/emacs24-starter-kit
  * http://pages.sachachua.com/.emacs.d/Sacha.html
  * http://www.aaronbedra.com/emacs.d


** Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:
1. Install Emacs version 24 or greater
2. Checkout config folder
   #+begin_example sh
   git clone http://github.com/michalfaber/dot_emacs.git
   #+end_example
3. Move the resulting directory to =~/.emacs.d=
4. Launch Emacs!

If you want to keep your regular =~/.emacs.d= in place and just launch a single instance, try:
#+begin_example sh
emacs -q -l ~/path/to/dot_emacs/init.el --eval "(run-hooks 'after-init-hook)"
#+end_example
Note that having a =~/.emacs= file might override the settings, make sure that this file is not present.

** Folder structure

  Subfolders under root folder:

#+begin_example
.emacs.d
    |-- elpa
    |-- site-lisp
    `-- sandbox
#+end_example

  * =/elpa/= contains packages downloaded from ELPA.
  * =/site-lisp/= contains sources of packages which will override packages from ELPA.
  * =/sandbox/= folder for experiments. All stuff from this folder will be loaded. Here I put packages, scripts I want to have a look at before I decide whether to use it or discard.

* Implementation

** Personal information

  #+begin_src emacs-lisp
(setq user-full-name "Michal Faber")
(setq user-mail-address "michalfaber@gmail.com")
  #+end_src

** Load path

Load path, location of some default files.

  #+begin_src emacs-lisp
(let ((elisp-dir (expand-file-name "site-lisp" emacs-root-dir)))
  ;; add the site-lisp directory to the load path
  (add-to-list 'load-path elisp-dir)
  ;; load specific files
  (when (file-exists-p elisp-dir)
    (let ((default-directory elisp-dir))
      (normal-top-level-add-subdirs-to-load-path))))

(setq autoload-file (concat emacs-root-dir "loaddefs.el"))
(setq package-user-dir (concat emacs-root-dir "elpa"))

(setq custom-file (concat emacs-root-dir "custom.el"))
(load custom-file 'noerror)
  #+end_src

** Basic packages

  #+begin_src emacs-lisp

;; deprecated , usedd only for backward-compatibility
(require 'cl)

;; new emacs24 cl lib
(require 'cl-lib)

  #+end_src


** Check if a package exists in the load path (function)

This function may be used to preempt the installation of ELPA versions of packages whose source may already be found in the load path.

  #+begin_src emacs-lisp

(defun is-loadable-p (package)
  "Check if PACKAGE is loadable from a directory in `load-path'."
  (let ((load-file (concat (symbol-name package) ".el")))
    (catch 'file-found
      (dolist (dir load-path)
        (let ((path (expand-file-name load-file dir)))
          (when (file-exists-p path)
            (throw 'file-found path)))))))

  #+end_src

** ELPA archive repositories.

  #+begin_src emacs-lisp

(setq package-archives
        '(("gnu"         . "http://elpa.gnu.org/packages/")
          ("org"         . "http://orgmode.org/elpa/")
          ("melpa"       . "http://melpa.org/packages/")
          ("marmalade"   . "http://marmalade-repo.org/packages/")))

(setq package-archive-enable-alist '(("melpa" deft magit)))

(package-initialize)

  #+end_src

** Install packages from ELPA (function)

Installs packages from ELPA only if not installed or loadable locally

  #+begin_src emacs-lisp

(defun install-if-needed (&rest packages)
  "Install PACKAGES using ELPA if they are not loadable or installed locally."
  (when packages
    (unless package-archive-contents
      (package-refresh-contents))
    (dolist (package packages)
      (unless (or (is-loadable-p package)
                    (package-installed-p package))
          (package-install package)))))

  #+end_src

** Loads sub configuration (function)

Loads other configurations (files with extensions .el, *.org)

  #+begin_src emacs-lisp

(defun load-config (file &optional header-or-tag)
  "Load configuration from other *.org files.
  If the optional argument is the id of a subtree then only
  configuration from within that subtree will be loaded.  If it is
  not an id then it will be interpreted as a tag, and only subtrees
  marked with the given tag will be loaded.

  For example, to load all *.org files from a directory simply
  add (load-config \"lisp\") to your configuration.

  To load only the 'window-system' config from
  starter-kit-misc-recommended.org add
  (load-config \"misc-recommended\" \"window-system\")
  to your configuration."

  (let ((file (expand-file-name (if (string-match ".+\.org" file)
                                  file (format "%s.org" file))
                                emacs-root-dir)))
     (org-babel-load-file
      (if header-or-tag
          (let* ((base (file-name-nondirectory file))
                 (dir  (file-name-directory file))
                 (partial-file (expand-file-name
                                (concat "." (file-name-sans-extension base)
                                        ".part." header-or-tag ".org")
                                dir)))
            (unless (file-exists-p partial-file)
              (with-temp-file partial-file
                (insert
                 (with-temp-buffer
                   (insert-file-contents file)
                   (save-excursion
                     (condition-case nil ;; collect as a header
                         (progn
                           (org-link-search (concat"#"header-or-tag))
                           (org-narrow-to-subtree)
                           (buffer-string))
                       (error ;; collect all entries with as tags
                        (let (body)
                          (org-map-entries
                           (lambda ()
                             (save-restriction
                               (org-narrow-to-subtree)
                               (setq body (concat body "\n" (buffer-string)))))
                           header-or-tag)
                          body))))))))
            partial-file)
        file))))

  #+end_src

** Bug workaround

Work around a bug on OS X where system-name is FQDN.

  #+begin_src emacs-lisp

(if (or
     (eq system-type 'darwin)
     (eq system-type 'berkeley-unix))
     (setq system-name (car (split-string system-name "\\."))))

  #+end_src

** [[https://github.com/michalfaber/dot_emacs/blob/master/basic_appearance.org][Loading basic appearance (colors, size etc.)]]

  #+begin_src emacs-lisp

(load-config "basic_appearance")

  #+end_src

** [[https://github.com/michalfaber/dot_emacs/blob/master/basic_behaviour.org][Loading basic stuff about behaviour - tabs, newlines, backup etc.]]

  #+begin_src emacs-lisp

(load-config "basic_behaviour")

  #+end_src

** [[https://github.com/michalfaber/dot_emacs/blob/master/navigation.org][Loading navigation rules]]

  #+begin_src emacs-lisp

(load-config "navigation")

  #+end_src

** [[https://github.com/michalfaber/dot_emacs/blob/master/coding.org][Loading coding config]]

  #+begin_src emacs-lisp

(load-config "coding")

  #+end_src

** Sandbox folder

Loading everything from sandbox folder : individual scripts, adding sub folders to load path

  #+begin_src emacs-lisp

(cl-flet ((sk-load (base)
         (let* ((path          (expand-file-name base emacs-root-dir))
                (literate      (concat path ".org"))
                (encrypted-org (concat path ".org.gpg"))
                (plain         (concat path ".el"))
                (encrypted-el  (concat path ".el.gpg")))
           (cond
           ((file-exists-p encrypted-org) (org-babel-load-file encrypted-org))
           ((file-exists-p encrypted-el)  (load encrypted-el))
           ((file-exists-p literate)      (org-babel-load-file literate))
           ((file-exists-p plain)         (load plain)))))
      (remove-extension (name)
        (string-match "\\(.*?\\)\.\\(org\\(\\.el\\)?\\|el\\)\\(\\.gpg\\)?$" name)
        (match-string 1 name)))

 (let ((sandbox-dir (expand-file-name "sandbox" emacs-root-dir)))
     (add-to-list 'load-path sandbox-dir)
     (mapc #'sk-load
           (remove-duplicates
            (mapcar #'remove-extension
                    (directory-files sandbox-dir t ".*\.\\(org\\|el\\)\\(\\.gpg\\)?$"))
            :test #'string=))))

  #+end_src
