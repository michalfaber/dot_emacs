#+TITLE: Basic behaviour
#+OPTIONS: toc:2 num:nil

** Turn off the ring bell

  #+begin_src emacs-lisp

(setq ring-bell-function #'ignore)

  #+end_src

** Auto new line

  #+begin_src emacs-lisp

(setq next-line-add-newlines t)

  #+end_src

** Turn off the backup files

I donâ€™t like them scatter everywhere.

  #+begin_src emacs-lisp

(setq make-backup-files nil)

  #+end_src

** Yes and No

Nobody likes to have to type out the full yes or no when Emacs asks. Which it does often. Make it one character.

  #+begin_src emacs-lisp

(defalias 'yes-or-no-p 'y-or-n-p)

  #+end_src

** Marking text, Copy/Paste between OSX and emacs

   #+BEGIN_SRC emacs-lisp

(delete-selection-mode t)

(defun pbcopy ()
  (interactive)
  (call-process-region (point) (mark) "pbcopy")
  (setq deactivate-mark t))

(defun pbpaste ()
  (interactive)
  (call-process-region (point) (if mark-active (mark) (point)) "pbpaste" t t))

(defun pbcut ()
  (interactive)
  (pbcopy)
  (delete-region (region-beginning) (region-end)))

(global-set-key (kbd "C-c c") 'pbcopy)
(global-set-key (kbd "C-c v") 'pbpaste)
(global-set-key (kbd "C-c x") 'pbcut)

   #+END_SRC

** Indentation / Tabs

   2 spaces instead of tabs.

   #+BEGIN_SRC emacs-lisp

(setq-default tab-width 2)
(setq-default indent-tabs-mode nil)
(global-set-key (kbd "RET") 'newline-and-indent)

   #+END_SRC

** Highlight matching parentheses when the point is on them.

May slow things down a little

   #+BEGIN_SRC emacs-lisp

(require 'rainbow-delimiters)

(show-paren-mode 1)

(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

   #+END_SRC

** Save a list of recent files visited.

   #+BEGIN_SRC emacs-lisp

(recentf-mode 1)

   #+END_SRC

** Transparently open compressed files

   #+BEGIN_SRC emacs-lisp

(auto-compression-mode t)

   #+END_SRC


** Exec path from shell

   #+BEGIN_SRC emacs-lisp

(install-if-needed 'exec-path-from-shell)

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))

   #+END_SRC

** Undo mode

  #+begin_src emacs-lisp

(install-if-needed 'undo-tree)

(global-undo-tree-mode t)
(setq undo-tree-visualizer-timestamps t)
(setq undo-tree-visualizer-diff t)

  #+end_src

** Help - guide-key

It's hard to remember keyboard shortcuts. The =guide-key= package pops up help after a short delay.

  #+begin_src emacs-lisp

(install-if-needed 'guide-key)
(setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c"))
(guide-key-mode t)

  #+end_src

** Repeatable commands

Allows repeat a command without prefix key. Taken from [http://oremacs.com/2015/01/14/repeatable-commands/]

  #+begin_src emacs-lisp

(defun def-rep-command (alist)
    "Return a lambda that calls the first function of ALIST.
  It sets the transient map to all functions of ALIST."
    (lexical-let ((keymap (make-sparse-keymap))
                  (func (cdar alist)))
      (mapc (lambda (x)
              (define-key keymap (car x) (cdr x)))
            alist)
      (lambda (arg)
        (interactive "p")
        (funcall func arg)
        (set-transient-map keymap t))))

  #+end_src

** Zoom in/out

Simple text-scale-increase/decrease causes wrong scaling of linum strip. Here is a small tweak taken from [http://unix.stackexchange.com/questions/29786/font-size-issues-with-emacs-in-linum-mode/30087#30087]

  #+begin_src emacs-lisp

  ;; This script is set for a `text-scale-mode-step` of `1.04`
  (setq text-scale-mode-step 1.04)
  ;;
  ;; List: `Sub-Zoom Font Heights per text-scale-mode-step`
  ;;   eg.  For a default font-height of 120 just remove the leading `160 150 140 130`
  (defvar sub-zoom-ht (list 120 120 110 100 100  90  80  80  80  80  70  70  60  60  50  50  50  40  40  40  30  20  20  20  20  20  20  10  10  10  10  10  10  10  10  10  10   5   5   5   5   5   2   2   2   2   2   2   2   2   1   1   1   1   1   1   1   1   1   1   1   1))
  (defvar sub-zoom-len (safe-length sub-zoom-ht))
  (defvar def-zoom-ht (car sub-zoom-ht))
  (set-face-attribute 'default nil :height def-zoom-ht)

  (defun text-scale-adjust-zAp ()
     (interactive)
     (text-scale-adjust 0)
     (set-face-attribute 'linum nil :height def-zoom-ht)
   )

  (defun text-scale-decrease-zAp (dec)
     (interactive "p")
     (if (not (boundp 'text-scale-mode-amount)) ;; first-time init
                (setq  text-scale-mode-amount 0))
     (setq text-scale (round (/ (* 1 text-scale-mode-amount)
                                     text-scale-mode-step)))
     (if (> text-scale (- 1 sub-zoom-len))
         (progn
           (text-scale-decrease text-scale-mode-step)
           (if (<= 0 text-scale-mode-amount)
               (set-face-attribute 'linum nil :height def-zoom-ht)
             (if (> 0 text-scale-mode-amount)
                 (set-face-attribute 'linum nil :height
                                       (elt sub-zoom-ht (- 0 text-scale)))))))
  )

  (defun text-scale-increase-zAp (inc)
     (interactive "p")
     (if (not (boundp 'text-scale-mode-amount)) ;; first-time init
                (setq  text-scale-mode-amount 0))
     (setq text-scale (round (/ (* 1 text-scale-mode-amount)
                                     text-scale-mode-step)))
     (if (< text-scale 85)
         (progn
           (text-scale-increase text-scale-mode-step)
           (if (< (- 0 text-scale-mode-step) text-scale-mode-amount)
               (set-face-attribute 'linum nil :height def-zoom-ht)
             (if (> 0 text-scale-mode-amount)
                 (set-face-attribute 'linum nil :height
                                       (elt sub-zoom-ht (- 0 text-scale)))))))
  )

  (global-set-key (kbd "<f6> g")
                  (def-rep-command
                      '(("g" . text-scale-increase-zAp)
                        ("l" . text-scale-decrease-zAp))))
  (global-set-key (kbd "<f6> l")
                  (def-rep-command
                      '(("l" . text-scale-decrease-zAp)
                        ("g" . text-scale-increase-zAp))))

  #+end_src

** Resizing panes

Improved resizing. Less keys to press.

  #+begin_src emacs-lisp

  (global-set-key (kbd "<f6> [")
                (def-rep-command
                    '(("[" . shrink-window-horizontally)
                      ("]" . enlarge-window-horizontally))))

  (global-set-key (kbd "<f6> ]")
                (def-rep-command
                    '(("[" . shrink-window-horizontally)
                      ("]" . enlarge-window-horizontally))))


  (global-set-key (kbd "<f6> ;")
              (def-rep-command
                  '((";" . enlarge-window)
                    ("." . shrink-window))))

  (global-set-key (kbd "<f6> .")
              (def-rep-command
                  '((";" . enlarge-window)
                    ("." . shrink-window))))
  #+end_src






